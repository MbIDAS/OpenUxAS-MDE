
service StatusReportService {
    fields {
        VehicleId { type: integer, required: true }
    }
    xml {
        tag: "Service"
        attr Type: "StatusReportService"
        attr VehicleID: VehicleId
    }
}

service Test_SimulationTime {
    xml {
        tag: "Service"
        attr Type: "Test_SimulationTime"
    }
}

service TaskManagerService {
    xml {
        tag: "Service"
        attr Type: "TaskManagerService"
    }
}

service SensorManagerService {
    xml {
        tag: "Service"
        attr Type: "SensorManagerService"
    }
}

service AutomationRequestValidatorService {
    xml {
        tag: "Service"
        attr Type: "AutomationRequestValidatorService"
    }
}

service RoutePlannerVisibilityService {
    fields {
        TurnRadiusOffset_m { type: float, required: true }
        MinimumWaypointSeparation_m { type: float, required: true }
    }
    xml {
        tag: "Service"
        attr Type: "RoutePlannerVisibilityService"
        attr TurnRadiusOffset_m: TurnRadiusOffset_m
        attr MinimumWaypointSeparation_m: MinimumWaypointSeparation_m
    }
}

service PlanBuilderService {
    fields {
        AssignmentStartPointLead_m { type: float, required: true }
    }
    xml {
        tag: "Service"
        attr Type: "PlanBuilderService"
        attr AssignmentStartPointLead_m: AssignmentStartPointLead_m
    }
}

service SendMessagesService {
    fields {
        PathToMessageFiles { type: string, required: true }
        messages { type: struct message SendMessagesServiceMessage , required: false }
    }
    xml {
        tag: "Service"
        attr Type: "SendMessagesService"
        attr PathToMessageFiles: PathToMessageFiles
        children messages {
            tag: "Message"
            attr MessageFileName: MessageFileName
            attr SendTime_ms: SendTime_ms
        }
    }
}

message SendMessagesServiceMessage {
    fields {
        MessageFileName { type: string, required: true }
        SendTime_ms { type: integer, required: true }
    }
}

service RouteAggregatorService {
    xml {
        tag: "Service"
        attr Type: "RouteAggregatorService"
    }
}

service AssignmentTreeBranchBoundService {
    fields {
        NumberNodesMaximum { type: integer, required: true }
        CostFunction { type: string, required: true }
    }
    xml {
        tag: "Service"
        attr Type: "AssignmentTreeBranchBoundService"
        attr NumberNodesMaximum: NumberNodesMaximum
        attr CostFunction: CostFunction
    }
}

service AutomationDiagramDataService {
    xml {
        tag: "Service"
        attr Type: "AutomationDiagramDataService"
    }
}

service WaypointPlanManagerService {
    fields {
        NumberWaypointsToServe { type: integer, required: true }
        NumberWaypointsOverlap { type: integer, required: true }
        DefaultLoiterRadius_m { type: float, required: true }
        ParamTurnType { type: enum, values: [TurnShort, FlyOver], required: true }
        AddLoiterToEndOfSegments { type: bool, required: true }
        AddLoiterToEndOfMission { type: bool, required: true }
        LoopBackToFirstTask { type: bool, required: true }
        GimbalPayloadId { type: integer, required: true }
    }
    xml {
        foreach vehicles {
            tag: "Service"
            attr Type: "WaypointPlanManagerService"
            attr VehicleID: vehicles.ID
            attr NumberWaypointsToServe: NumberWaypointsToServe
            attr NumberWaypointsOverlap: NumberWaypointsOverlap
            attr DefaultLoiterRadius_m: DefaultLoiterRadius_m
            attr "param.turnType": ParamTurnType
            attr AddLoiterToEndOfSegments: AddLoiterToEndOfSegments
            attr AddLoiterToEndOfMission: AddLoiterToEndOfMission
            attr LoopBackToFirstTask: LoopBackToFirstTask
            attr GimbalPayloadId: GimbalPayloadId
        }
    }
}

service PlanBuilderService {
    fields {
        AssignmentStartPointLead_m { type: float, required: true }
    }
    xml {
        tag: "Service"
        attr Type: "PlanBuilderService"
        attr AssignmentStartPointLead_m: AssignmentStartPointLead_m
    }
}

service MessageLoggerDataService {
    fields {
        LogFileMessageCountLimit { type: integer, required: true }
        FilesPerSubDirectory { type: integer, required: true }
        LogMessages { type: struct {
                              NumberMessagesToSkip { type: integer, required: true }
                            }[], required: true }
    }
    xml {
        tag: "Service"
        attr Type: "MessageLoggerDataService"
        attr LogFileMessageCountLimit: LogFileMessageCountLimit
        attr FilesPerSubDirectory: FilesPerSubDirectory
        children LogMessages {
            tag: "LogMessage"
            attr MessageType: type
            attr NumberMessagesToSkip: NumberMessagesToSkip
        }
    }
}
